# FROM continuumio/anaconda3
# COPY . /app
# WORKDIR /app
# RUN conda create -n env python=3.6.5
# RUN echo "source activate env" > ~/.bashrc
# ENV PATH /opt/conda/envs/env/bin:$PATH

# RUN pip install flask
# RUN pip install cmake
# RUN pip install face_recognition
# EXPOSE 5001
# CMD python ./server.py


FROM python:3.6.5

# Set the ENTRYPOINT to use bash
# (this is also where you’d set SHELL,
# if your version of docker supports this)
# ENTRYPOINT [ “/bin/bash”, “-c” ]

EXPOSE 5000

# Conda supports delegating to pip to install dependencies
# that aren’t available in anaconda or need to be compiled
# for other reasons. In our case, we need psycopg compiled
# with SSL support. These commands install prereqs necessary
# to build psycopg.
# RUN apt-get update && apt-get install -y \
#   libpq-dev \
#   build-essential \
#   && rm -rf /var/lib/apt/lists/*

# Use the environment.yml to create the conda environment.
# ADD environment.yml /tmp/environment.yml
# WORKDIR /tmp
# RUN [ “conda”, “env”, “create” ]

# ADD . /code

# Use bash to source our new environment for setting up
# private dependencies—note that /bin/bash is called in
# exec mode directly
# WORKDIR /code/shared
# RUN [ “/bin/bash”, “-c”, “source activate your-environment && python setup.py develop” ]

# WORKDIR /code
# RUN [ “/bin/bash”, “-c”, “source activate your-environment && python setup.py develop” ]

# We set ENTRYPOINT, so while we still use exec mode, we don’t
# explicitly call /bin/bash
COPY . /app
WORKDIR /app


# RUN pip install flask
# RUN pip install cmake
# RUN pip install face_recognition
RUN pip install -r requirements.txt

EXPOSE 5001
CMD ["python", "server.py"]
# CMD [ “source activate your-environment && exec python application.py” ]

